<html>

<head>
    <!---Imports d3 and topojson --->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>
    <style>
        body {
            background-color: rgb(255, 255, 255);
        }

        h1 {
            font-family: 'Times New Roman', serif;
            font-weight: lighter;
            font-size: 3em;
            text-align: center;
            white-space: normal;
            line-height: 1.2em;
            margin-top: 0.5em;
        }

        h2 {
            font-family: 'Times New Roman', serif;
            font-weight: lighter;
            font-size: 1em;
            text-align: center;
            white-space: normal;
            line-height: 1.2em;
        }

        h3 {
            font-family: 'Times New Roman', serif;
            font-weight: lighter;
            font-size: 1.2em;
            text-align: center;
            white-space: normal;
            line-height: 1.2em;
        }

        svg#calisvg {
            fill: None;
        }

        svg#caliMinisvg {
            fill: None;
        }

        svg#nysvg {
            fill: None;
        }

        svg#nyMinisvg {
            fill: None;
        }

        .tooltip {
            position: absolute;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 5px;
            border-radius: 3px;
            pointer-events: none;
            display: none;
            z-index: 999;
        }

        .spacer {
            height: 1700px;
        }
    </style>
</head>

<body>
    <h1>How Tech Startups in California<br>Compare to Those in New York</h1>
    <h2> By <span style="font-weight: bold;">LEINA LI</span> </h2>

    <div style="position:absolute; left:100px; top:220px;">
        <svg id="calisvg" height="350" width="350"></svg>
        <svg id="caliMinisvg" height="350" width="350" style="border:2px solid rgb(0, 0, 0)"></svg>

    </div>
    <div class="tooltip"></div>
    <div style="position:absolute; left:100px; top:600px;">
        <svg id="nysvg" height="350" width="350"></svg>
        <svg id="nyMinisvg" height="350" width="350" style="border:2px solid rgb(0, 0, 0)"></svg>
    </div>
    <div style="position:absolute; left:900px; top:200px; column-width: 700px;">
        <h3> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et
            dolore
            magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
            commodo
            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
            est
            laborum.
            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et
            dolore
            magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
            commodo
            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
            est
            laborum.
        </h3>
        <br></br>
        <br></br>
        <br></br>
        <h3> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et
            dolore
            magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
            commodo
            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
            est
            laborum.
            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et
            dolore
            magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
            commodo
            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
            est
            laborum.
        </h3>
    </div>
    <div style="position:absolute; left:400px; top:1000px; column-width: 900px;">
        <h3> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et
            dolore
            magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
            commodo
            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
            est
            laborum.
            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et
            dolore
            magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
            commodo
            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
            est
            laborum.
        </h3>
    </div>

    <div style="position:absolute; left:900px; top:1300px;">
        <svg id="caliPlotsvg" height="500" width="700" style="border:2px solid rgb(0, 0, 0)"></svg>
    </div>
    <div style="position:absolute; left:100px; top:1300px;">
        <svg id="nyPlotsvg" height="500" width="700" style="border:2px solid rgb(0, 0, 0)"></svg>
    </div>
    <div class="spacer"></div>


    <script>

        const calisvg = d3.select("svg#calisvg");
        const nysvg = d3.select("svg#nysvg");

        const caliminisvg = d3.select("svg#caliMinisvg")
        const nyminisvg = d3.select("svg#nyMinisvg")

        const caliPlotsvg = d3.select("svg#caliPlotsvg")
        const nyPlotsvg = d3.select("svg#nyPlotsvg")


        // constants shared across all maps
        width = calisvg.attr("width");
        height = calisvg.attr("height");
        const margin = { top: 10, right: 10, bottom: 10, left: 10 };
        const mapWidth = width - margin.left - margin.right;
        const mapHeight = height - margin.top - margin.bottom;

        // constants for minimaps
        miniWidth = caliminisvg.attr("width");
        miniHeight = caliminisvg.attr("height");
        const miniMapWidth = miniWidth - margin.left - margin.right;
        const miniMapHeight = miniHeight - margin.left - margin.right;

        // constants for plots
        plotwidth = caliPlotsvg.attr("width");
        plotheight = caliPlotsvg.attr("height");
        const margins = { top: 30, right: 55, bottom: 10, left: 55 };
        const plotWidth = plotwidth - margins.left - margins.right;
        const plotHeight = plotheight - margins.left - margins.right;

        const requestData = async function () {
            // start california map
            const calijson = await d3.json("./cali.topojson")
            var caliFeat = topojson.feature(calijson, calijson.objects.cali)
            var caliMesh = topojson.mesh(calijson, calijson.objects.cali)

            var caliProjection = d3.geoMercator().fitSize([mapWidth, mapHeight], caliFeat);
            var calipath = d3.geoPath().projection(caliProjection);

            // console.log(caliFeat)
            let calimap = calisvg.append("g").attr("id", "californiaMap");

            let caliPaths = calimap.selectAll("path.neighbors").data(caliFeat.features)
                .join("path")
                .attr("class", "neighbors")
                .attr("d", calipath)
                .style("fill", "rgb(229, 229, 229)");

            let caliPath = calimap.append("path").datum(caliMesh)
                .attr("class", "outline")
                .attr("d", calipath)
                .style("stroke", "white")
                .attr("class", "neighbor-outline")
                .style("stroke-width", 1);

            // end california map


            // start cali mini map
            let caliMiniMap = caliminisvg.append("g").attr("id", "caliMiniMap");

            let caliMiniPaths = caliMiniMap.selectAll("path.neighbors").data(caliFeat.features)
                .join("path")
                .attr("class", "neighbors")
                .attr("d", calipath)
                .style("fill", "rgb(229, 229, 229)");

            let caliMiniPath = caliMiniMap.append("path").datum(caliMesh)
                .attr("class", "outline")
                .attr("d", calipath)
                .style("stroke", "white")
                .attr("class", "neighbor-outline")
                .style("stroke-width", 1);
            // end cali mini map

            // start new york map
            const nyjson = await d3.json("./newyork.topojson")
            var nyFeat = topojson.feature(nyjson, nyjson.objects.newyork)
            var nyMesh = topojson.mesh(nyjson, nyjson.objects.newyork)

            var nyProjection = d3.geoMercator().fitSize([mapWidth, mapHeight], nyFeat);
            var nypath = d3.geoPath().projection(nyProjection);

            let nymap = nysvg.append("g").attr("id", "newyorkMap");

            let nyPaths = nymap.selectAll("path.neighbors").data(nyFeat.features)
                .join("path")
                .attr("class", "neighbors")
                .attr("d", nypath)
                .style("fill", "rgb(229, 229, 229)");

            let nyPath = nymap.append("path").datum(nyMesh)
                .attr("class", "outline")
                .attr("d", nypath)
                .style("stroke", "white")
                .attr("class", "neighbor-outline")
                .style("stroke-width", 1);
            // end new york map

            // start new york mini map
            let nyMiniMap = nyminisvg.append("g").attr("id", "nyMiniMap");

            let nyMiniPaths = nyMiniMap.selectAll("path.neighbors").data(nyFeat.features)
                .join("path")
                .attr("class", "neighbors")
                .attr("d", nypath)
                .style("fill", "rgb(229, 229, 229)");

            let nyMiniPath = nyMiniMap.append("path").datum(nyMesh)
                .attr("class", "outline")
                .attr("d", nypath)
                .style("stroke", "white")
                .attr("class", "neighbor-outline")
                .style("stroke-width", 1);
            // end new york mini map

            d3.csv('./startup_filtered.csv', d3.autoType)
                .then((data) => {
                    // data that is in california
                    var caliPoints = []
                    // data that is in new york
                    var nyPoints = []

                    data.forEach(function (point) {
                        if (point.state_code == "CA") {
                            caliPoints.push(point);
                        }
                        else if (point.state_code == "NY") {
                            nyPoints.push(point);
                        }
                    });
                    // console.log(caliPoints)

                    function showTooltip(event, text) {
                        const tooltip = document.querySelector('.tooltip');
                        tooltip.innerHTML = text;

                        const tooltipHeight = tooltip.offsetHeight;

                        tooltip.style.left = event.pageX + 'px';
                        tooltip.style.top = (event.pageY - tooltipHeight - 75) + 'px';
                        tooltip.style.display = 'block';
                    }

                    var caliCircles = calimap.selectAll("circle").data(caliPoints)
                        .join("circle")
                        .attr("cx", d => caliProjection([d['longitude'], d['latitude']])[0])
                        .attr("cy", d => caliProjection([d['longitude'], d['latitude']])[1])
                        .attr("r", 0.5)
                        .attr("opacity", 0.4)
                        .attr("fill", d => d['is_top500'] === 0 ? "red" : "green");

                    var caliMiniCircles = caliMiniMap.selectAll("circle").data(caliPoints)
                        .join("circle")
                        .attr("cx", d => caliProjection([d['longitude'], d['latitude']])[0])
                        .attr("cy", d => caliProjection([d['longitude'], d['latitude']])[1])
                        .attr("r", 0.3)
                        .attr("opacity", 0.3)
                        .attr("fill", d => d['is_top500'] === 0 ? "red" : "green")
                        .on('mouseover', function (event, d) {
                            const isTop500 = d.is_top500 === 1 ? "Yes" : "No";
                            const formattedFunding = d.funding_total_usd.toLocaleString();
                            const tooltipText = `Name: ${d.name} <br> Location: ${d.city}, ${d.state_code}<br>Top 500: ${isTop500} <br>Total funding: $${formattedFunding}`;
                            showTooltip(event, tooltipText);
                        })
                        .on('mouseout', function () {
                            const tooltip = document.querySelector('.tooltip');
                            tooltip.style.display = 'none';
                        });

                    let caliGray = calimap.append("rect")
                        .attr("width", miniMapWidth)
                        .attr("height", miniMapHeight)
                        .attr("fill", "darkgray")
                        .attr("opacity", 0.5)
                        .attr("pointer-events", "none")
                        .attr("stroke", "black")
                        .attr("stroke-width", 2);

                    // cali zoom
                    var caliZoom = d3.zoom()
                        .scaleExtent([1, 70])
                        .on("zoom", caliZoomFunc);
                    caliminisvg.call(caliZoom);
                    caliminisvg.call(caliZoom.transform, d3.zoomIdentity
                        .translate(-(15 * 75), -(15 * 150))
                        .scale(15));

                    function caliZoomFunc({ transform }) {
                        caliMiniMap.attr("transform", transform.toString());
                        caliMiniMap.select(".neighbor-outline")
                            .style("stroke-width", 3 / transform.k);
                        caliMiniMap.select(".neighbors")
                            .style("stroke-width", 1 / transform.k);
                        caliMiniCircles.attr("r", 4 / transform.k);

                        const scaledWidth = miniMapWidth / transform.k;
                        const scaledHeight = miniMapHeight / transform.k;
                        const offsetX = -transform.x / transform.k;
                        const offsetY = -transform.y / transform.k;
                        caliGray.attr("x", offsetX)
                            .attr("y", offsetY)
                            .attr("width", scaledWidth)
                            .attr("height", scaledHeight);
                    }


                    var nyCircles = nymap.selectAll("circle").data(nyPoints)
                        .join("circle")
                        .attr("cx", d => nyProjection([d['longitude'], d['latitude']])[0])
                        .attr("cy", d => nyProjection([d['longitude'], d['latitude']])[1])
                        .attr("r", 1)
                        .attr("opacity", 1)
                        .attr("fill", d => d['is_top500'] === 0 ? "red" : "green");

                    var nyMiniCircles = nyMiniMap.selectAll("circle").data(nyPoints)
                        .join("circle")
                        .attr("cx", d => nyProjection([d['longitude'], d['latitude']])[0])
                        .attr("cy", d => nyProjection([d['longitude'], d['latitude']])[1])
                        .attr("r", 0.3)
                        .attr("opacity", 0.3)
                        .attr("fill", d => d['is_top500'] === 0 ? "red" : "green")
                        .on('mouseover', function (event, d) {
                            const isTop500 = d.is_top500 === 1 ? "Yes" : "No";
                            const formattedFunding = d.funding_total_usd.toLocaleString();
                            const tooltipText = `Name: ${d.name} <br> Location: ${d.city}, ${d.state_code}<br>Top 500: ${isTop500} <br>Total funding: $${formattedFunding}`;
                            showTooltip(event, tooltipText);
                        })
                        .on('mouseout', function () {
                            const tooltip = document.querySelector('.tooltip');
                            tooltip.style.display = 'none';
                        });

                    let nyGray = nymap.append("rect")
                        .attr("width", miniMapWidth)
                        .attr("height", miniMapHeight)
                        .attr("fill", "darkgray")
                        .attr("opacity", 0.5)
                        .attr("pointer-events", "none")
                        .attr("stroke", "black")
                        .attr("stroke-width", 2);

                    // ny zoom
                    var nyZoom = d3.zoom()
                        .scaleExtent([1, 70])
                        .on("zoom", nyZoomFunc);
                    nyminisvg.call(nyZoom);
                    nyminisvg.call(nyZoom.transform, d3.zoomIdentity
                        .translate(-(25 * 232), -(25 * 272))
                        .scale(25));

                    function nyZoomFunc({ transform }) {
                        nyMiniMap.attr("transform", transform.toString());
                        nyMiniMap.select(".neighbor-outline")
                            .style("stroke-width", 3 / transform.k);
                        nyMiniMap.select(".neighbors")
                            .style("stroke-width", 1 / transform.k);
                        nyMiniCircles.attr("r", 4 / transform.k);

                        const scaledWidth = miniMapWidth / transform.k;
                        const scaledHeight = miniMapHeight / transform.k;
                        const offsetX = -transform.x / transform.k;
                        const offsetY = -transform.y / transform.k;
                        nyGray.attr("x", offsetX)
                            .attr("y", offsetY)
                            .attr("width", scaledWidth)
                            .attr("height", scaledHeight);
                    }

                    // Created Cali Pcp
                    dimensions = ["age_first_funding_year", "age_last_funding_year", "funding_total_usd", "is_top500"]

                    var y = {}
                    for (i in dimensions) {
                        name = dimensions[i]
                        y[name] = d3.scaleLinear()
                            .domain(d3.extent(data, d => d[name]))
                            .range([plotHeight, 0])
                    }

                    x = d3.scalePoint()
                        .range([0, plotWidth])
                        .domain(dimensions);

                    var highlight = function (d) {
                        // First, set all lines to grey with reduced opacity
                        d3.selectAll(".line")
                            .transition().duration(100)
                            .style("stroke", "lightgrey")
                            .style("opacity", "0.2");

                        // Then, highlight the hovered line with its original color and full opacity
                        d3.select(this)
                            .transition().duration(200)
                            .style("stroke", this.getAttribute("class") === 'line 0' ? "red" : "green")
                            .style("opacity", "1");
                    }

                    // Unhighlight
                    var doNotHighlight = function (d) {
                        d3.selectAll(".line")
                            .transition().duration(100)
                            .style("stroke", d => d['is_top500'] === 0 ? "red" : "green")
                            .style("opacity", "0.5")
                    }


                    function path(d) {
                        return d3.line()(dimensions.map(function (p) { return [x(p), y[p](d[p])]; }));
                    }

                    const caliPlot = caliPlotsvg.append("g")
                        .attr("transform", "translate(" + margins.left + "," + margins.top + ")");


                    caliPlot.selectAll("caliPath")
                        .data(data)
                        .enter()
                        .append("path")
                        .attr("class", function (d) { return "line " + d.is_top500 })
                        .attr("d", path)
                        .style("fill", "none")
                        .style("opacity", 0.5)
                        .style("stroke", d => d['is_top500'] === 0 ? "red" : "green")
                        .on("mouseover", highlight)
                        .on("mouseout", doNotHighlight)

                    caliPlot.selectAll("caliAxis")
                        .data(dimensions).enter()
                        .append("g")
                        .attr("class", "axis")
                        .attr("transform", function (d) { return "translate(" + x(d) + ")"; })
                        .each(function (d) { d3.select(this).call(d3.axisLeft().ticks(5).scale(y[d])); })
                        .append("text")
                        .style("text-anchor", "middle")
                        .attr("y", -9)
                        .text(function (d) { return d; })
                        .style("fill", "black")

                })

        }
        requestData();

    </script>
</body>