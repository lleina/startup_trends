<html>

<head>
    <!---Imports d3 and topojson --->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Times New Roman', serif;
            background-color: rgb(255, 255, 255);
        }

        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .map-story {
            display: flex;
            align-items: center;
            margin-right: 20px;
            flex-direction: row;
            justify-content: flex-start;
        }

        .pcp-story {
            display: flex;
            margin-right: 20px;
            flex-direction: column;
        }

        .map-container {
            display: flex;
            align-items: center;
            margin-right: 30px;
            flex-direction: column;
        }

        .map {
            margin-bottom: 50px;
            flex-direction: 1;
        }

        .story {
            margin-bottom: 20px;
            flex-direction: column;
            align-items: center;
        }

        .content {
            max-width: 500px;
            margin: 0 auto;
            flex-direction: row;
        }

        .pcp-content {
            max-width: 1400px;
            margin: 0 auto;
            flex-direction: row;
        }

        .pcp-content strong {
            font-weight: bold;
        }

        .pcp {
            margin-bottom: 20px;
            flex-direction: row;
            align-items: center;
        }

        h1 {
            font-family: 'Times New Roman', serif;
            font-weight: lighter;
            font-size: 3em;
            text-align: center;
            white-space: normal;
            line-height: 1.2em;
            margin-top: 0.5em;
        }

        h2 {
            font-family: 'Times New Roman', serif;
            font-weight: lighter;
            font-size: 1em;
            text-align: center;
            white-space: normal;
            line-height: 1.2em;
        }

        h3 {
            font-family: 'Times New Roman', serif;
            font-weight: lighter;
            font-size: 1.2em;
            text-align: left;
            white-space: normal;
            line-height: 1.2em;
        }

        .maptext {
            font-weight: normal;
        }

        .maptext strong {
            font-weight: bold;
        }

        h4 {
            font-family: 'Times New Roman', serif;
            font-weight: lighter;
            font-size: 1.5em;
            text-align: left;
            white-space: normal;
            line-height: 1.2em;
        }

        text {
            font-family: 'Times New Roman', serif;
            font-weight: bold;
            font-size: 1.3em;
            white-space: normal;
        }

        svg#calisvg {
            fill: None;
        }

        svg#caliMinisvg {
            fill: None;
        }

        svg#nysvg {
            fill: None;
        }

        svg#nyMinisvg {
            fill: None;
        }

        .tooltip {
            position: absolute;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 5px;
            border-radius: 3px;
            pointer-events: none;
            display: none;
            z-index: 999;
        }

        .plot-container {
            display: flex;
            justify-content: center;
            align-items: flex-start;
            gap: 50px;
        }

        .spacer {
            height: 1700px;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="title">
            <h1>How Tech Startups in California<br>Compare to Those in New York</h1>
            <h2> By <span style="font-weight: bold;">LEINA LI</span> </h2>
        </div>
        <div class="story">
            <div class="map-story">
                <div class="map-container">
                    <div class="map">
                        <svg id="calisvg" height="350" width="350">
                            <text x="71%" y="25%" text-anchor="middle" dominant-baseline="middle" font-size="20"
                                fill="black">Startups in California</text>
                        </svg>
                        <svg id="caliMinisvg" height="350" width="350" style="border:2px solid rgb(0, 0, 0)"></svg>
                        <div class="tooltip"></div>
                    </div>

                    <div class="map">
                        <svg id="nysvg" height="350" width="350">
                            <text x="28%" y="70%" text-anchor="middle" dominant-baseline="middle" font-size="20"
                                fill="black">Startups in New York</text>
                        </svg>
                        <svg id="nyMinisvg" height="350" width="350" style="border:2px solid rgb(0, 0, 0)"></svg>
                    </div>
                </div>

                <div class="content">
                    <div class="maptext">
                        <h3><strong>Startups: California vs. New York</strong> <br>
                            Exploring the disparities between California and New York's startup ecosystems reveals
                            California's enduring dominance despite New York's growing influence.
                            In the startup world, California reigns as the innovation hub, while New York City has
                            also emerged as a dynamic startup scene with abundant capital. Despite New York's recent
                            tech surge, California maintains a substantial lead in the number of startups. What
                            factors contribute to this difference?
                        </h3>
                        <h3><strong>Silicon Valley: The Birthplace of Innovation</strong> <br>
                            Silicon Valley, spanning from San Francisco to San Jose, is renowned for birthing global
                            tech giants. Its mix of prestigious universities, venture capital, and risk-taking
                            culture fosters innovation, drawing talent and investment worldwide. With prestious
                            universities, California has easy access to talent in Stanford, UC Berkeley, and
                            Caltech.
                        </h3>
                        <h3><strong>Venture Capital and Funding Opportunities</strong> <br>
                            Another key aspect of California's network potential is its robust venture capital and
                            funding networks. Silicon Valley's reputation as the capital of venture capital ensures
                            that startups have access to ample funding opportunities, with investors eager to back
                            promising ventures. Moreover, the interconnected nature
                            of California's startup
                            ecosystem means that successful entrepreneurs often reinvest their wealth into new
                            startups, creating a cycle of investment and innovation that fuels continued growth.
                        </h3>
                        <h3><strong>Californian Connections </strong> <br>
                            While New York boasts its own dynamic network and startup ecosystem, California's
                            network potential offers unparalleled connectivity
                            and concentration of talent and resources make it the ultimate destination for
                            startups looking to scale and thrive in the digital age.
                    </div>
                </div>
            </div>
        </div>
        <div class="pcp-story">
            <div class="pcp-content">
                <h3> <strong>Venture Capital and Funding Opportunities</strong><br>
                    In the dynamic world of startups, securing funding is often a pivotal milestone that can shape the
                    trajectory of a company's growth and success. However, the timing of when a startup receives its
                    funding—referred to as the "age of funding"—can have significant implications for its development,
                    scalability, and long-term viability.
                    Startups that secure early-stage funding often gain a competitive edge by accelerating their product
                    development, attracting top talent, and gaining traction in the market.
                    <br>
                    The age of funding also plays a crucial role in determining a startup's long-term sustainability and
                    resilience in the face of challenges. Startups that secure funding at an early stage and effectively
                    manage their resources are better positioned to weather market fluctuations, navigate regulatory
                    hurdles, and overcome unforeseen obstacles. Additionally, a well-timed infusion of capital can
                    provide startups with the runway they need to achieve profitability and achieve sustainable growth
                    over the long term.
                    <br>
                    In conclusion, the age of funding is a critical factor that influences the development, growth, and
                    success of startup companies. Whether securing early-stage investments to fuel innovation or
                    late-stage funding to drive expansion and exit strategies, startups must carefully consider the
                    timing and implications of their funding decisions to maximize their chances of success in an
                    increasingly competitive landscape.
                </h3>
            </div>
            <div class="pcp">
                <div class="plot-container">
                    <div class="plot">
                        <svg id="caliPlotsvg" height="500" width="700"></svg>
                    </div>
                    <div class="plot">
                        <svg id="nyPlotsvg" height="500" width="700"></svg>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>

        const calisvg = d3.select("svg#calisvg");
        const nysvg = d3.select("svg#nysvg");

        const caliminisvg = d3.select("svg#caliMinisvg")
        const nyminisvg = d3.select("svg#nyMinisvg")

        const caliPlotsvg = d3.select("svg#caliPlotsvg")
        const nyPlotsvg = d3.select("svg#nyPlotsvg")


        // constants shared across all maps
        width = calisvg.attr("width");
        height = calisvg.attr("height");
        const margin = { top: 10, right: 10, bottom: 10, left: 10 };
        const mapWidth = width - margin.left - margin.right;
        const mapHeight = height - margin.top - margin.bottom;

        // constants for minimaps
        miniWidth = caliminisvg.attr("width");
        miniHeight = caliminisvg.attr("height");
        const miniMapWidth = miniWidth - margin.left - margin.right;
        const miniMapHeight = miniHeight - margin.left - margin.right;

        // constants for plots
        plotwidth = caliPlotsvg.attr("width");
        plotheight = caliPlotsvg.attr("height");
        const margins = { top: 30, right: 60, bottom: 50, left: 60 };
        const plotWidth = plotwidth - margins.left - margins.right;
        const plotHeight = plotheight - margins.left - margins.right;

        const requestData = async function () {
            // start california map
            const calijson = await d3.json("./cali.topojson")
            var caliFeat = topojson.feature(calijson, calijson.objects.cali)
            var caliMesh = topojson.mesh(calijson, calijson.objects.cali)

            var caliProjection = d3.geoMercator().fitSize([mapWidth, mapHeight], caliFeat);
            var calipath = d3.geoPath().projection(caliProjection);

            // console.log(caliFeat)
            let calimap = calisvg.append("g").attr("id", "californiaMap");

            let caliPaths = calimap.selectAll("path.neighbors").data(caliFeat.features)
                .join("path")
                .attr("class", "neighbors")
                .attr("d", calipath)
                .style("fill", "rgb(229, 229, 229)");

            let caliPath = calimap.append("path").datum(caliMesh)
                .attr("class", "outline")
                .attr("d", calipath)
                .style("stroke", "white")
                .attr("class", "neighbor-outline")
                .style("stroke-width", 1);

            // end california map


            // start cali mini map
            let caliMiniMap = caliminisvg.append("g").attr("id", "caliMiniMap");

            let caliMiniPaths = caliMiniMap.selectAll("path.neighbors").data(caliFeat.features)
                .join("path")
                .attr("class", "neighbors")
                .attr("d", calipath)
                .style("fill", "rgb(229, 229, 229)");

            let caliMiniPath = caliMiniMap.append("path").datum(caliMesh)
                .attr("class", "outline")
                .attr("d", calipath)
                .style("stroke", "white")
                .attr("class", "neighbor-outline")
                .style("stroke-width", 1);
            // end cali mini map

            // start new york map
            const nyjson = await d3.json("./newyork.topojson")
            var nyFeat = topojson.feature(nyjson, nyjson.objects.newyork)
            var nyMesh = topojson.mesh(nyjson, nyjson.objects.newyork)

            var nyProjection = d3.geoMercator().fitSize([mapWidth, mapHeight], nyFeat);
            var nypath = d3.geoPath().projection(nyProjection);

            let nymap = nysvg.append("g").attr("id", "newyorkMap");

            let nyPaths = nymap.selectAll("path.neighbors").data(nyFeat.features)
                .join("path")
                .attr("class", "neighbors")
                .attr("d", nypath)
                .style("fill", "rgb(229, 229, 229)");

            let nyPath = nymap.append("path").datum(nyMesh)
                .attr("class", "outline")
                .attr("d", nypath)
                .style("stroke", "white")
                .attr("class", "neighbor-outline")
                .style("stroke-width", 1);
            // end new york map

            // start new york mini map
            let nyMiniMap = nyminisvg.append("g").attr("id", "nyMiniMap");

            let nyMiniPaths = nyMiniMap.selectAll("path.neighbors").data(nyFeat.features)
                .join("path")
                .attr("class", "neighbors")
                .attr("d", nypath)
                .style("fill", "rgb(229, 229, 229)");

            let nyMiniPath = nyMiniMap.append("path").datum(nyMesh)
                .attr("class", "outline")
                .attr("d", nypath)
                .style("stroke", "white")
                .attr("class", "neighbor-outline")
                .style("stroke-width", 1);
            // end new york mini map

            d3.csv('./startup_filtered.csv', d3.autoType)
                .then((data) => {
                    // data that is in california
                    var caliPoints = []
                    // data that is in new york
                    var nyPoints = []

                    data.forEach(function (point) {
                        if (point.state_code == "CA") {
                            caliPoints.push(point);
                        }
                        else if (point.state_code == "NY") {
                            nyPoints.push(point);
                        }
                    });
                    // console.log(caliPoints)

                    function showTooltip(event, text) {
                        const tooltip = document.querySelector('.tooltip');
                        tooltip.innerHTML = text;

                        const tooltipHeight = tooltip.offsetHeight;

                        tooltip.style.left = event.pageX + 'px';
                        tooltip.style.top = (event.pageY - tooltipHeight - 75) + 'px';
                        tooltip.style.display = 'block';
                    }

                    function showSchoolTooltip(event, text) {
                        const tooltip = document.querySelector('.tooltip');
                        tooltip.innerHTML = text;

                        const tooltipHeight = tooltip.offsetHeight;

                        tooltip.style.left = event.pageX + 'px';
                        tooltip.style.top = (event.pageY - tooltipHeight - 25) + 'px';
                        tooltip.style.display = 'block';
                    }

                    var caliCircles = calimap.selectAll("circle").data(caliPoints)
                        .join("circle")
                        .attr("cx", d => caliProjection([d['longitude'], d['latitude']])[0])
                        .attr("cy", d => caliProjection([d['longitude'], d['latitude']])[1])
                        .attr("r", 0.5)
                        .attr("opacity", 0.4)
                        .attr("fill", d => d['is_top500'] === 0 ? "red" : "green");

                    var caliMiniCircles = caliMiniMap.selectAll("circle").data(caliPoints)
                        .join("circle")
                        .attr("cx", d => caliProjection([d['longitude'], d['latitude']])[0])
                        .attr("cy", d => caliProjection([d['longitude'], d['latitude']])[1])
                        .attr("r", 0.3)
                        .attr("opacity", 0.3)
                        .attr("fill", d => d['is_top500'] === 0 ? "red" : "green")
                        .on('mouseover', function (event, d) {
                            const isTop500 = d.is_top500 === 1 ? "Yes" : "No";
                            const formattedFunding = d.funding_total_usd.toLocaleString();
                            const tooltipText = `Name: ${d.name} <br> Location: ${d.city}, ${d.state_code}<br>Top 500: ${isTop500} <br>Total funding: $${formattedFunding}`;
                            showTooltip(event, tooltipText);
                        })
                        .on('mouseout', function () {
                            const tooltip = document.querySelector('.tooltip');
                            tooltip.style.display = 'none';
                        });

                    let caliGray = calimap.append("rect")
                        .attr("width", miniMapWidth)
                        .attr("height", miniMapHeight)
                        .attr("fill", "darkgray")
                        .attr("opacity", 0.5)
                        .attr("pointer-events", "none")
                        .attr("stroke", "black")
                        .attr("stroke-width", 2);

                    // top 10 schools in cali from this website: https://www.usnews.com/best-colleges/ca 
                    cali_schools = { "Stanford University": [-122.1700278134956, 37.42780909980265], "CalTech": [-118.12466821078392, 34.13776406580326], "UC Berekely": [-122.25950351906475, 37.870400818428514], "UCLA": [-118.443838775048, 34.07011369309628], "UC Davis": [-121.76170177485399, 38.53835805193761], "UC San Diego": [-117.23437123276759, 32.881303124403736], "University of Southern California": [-118.2850955679645, 34.02248518790615], "UC Irvine": [-117.84169616157337, 33.64264486340942], "UC Santa Barbara": [-119.84891481736172, 34.41412219141523], "UC Santa Clara": [-121.93679113247447, 37.349070464098] }

                    var caliSchoolsGroup = caliMiniMap.append("g").attr("id", "caliSchoolsGroup");
                    var caliSchools = calimap.append("g").attr("id", "caliSchoolsGroup");
                    var symbolMiniGenerator = d3.symbol()
                        .type(d3.symbolStar)
                        .size(100);

                    var symbolGenerator = d3.symbol()
                        .type(d3.symbolStar)
                        .size(10);

                    for (const key in cali_schools) {
                        let spot = caliProjection(cali_schools[key]);

                        caliSchoolsGroup.append("g")
                            .attr("class", "spot-" + key)
                            .attr("transform", "translate(" + spot[0] + "," + spot[1] + ")")
                            .append("path")
                            .attr("d", symbolMiniGenerator)
                            .attr("fill", "black")
                            .attr("opacity", 0.8)
                            .attr("stroke", "black")
                            .attr("stroke-width", "0.1px")
                            .on('mouseover', function (event) {
                                const schoolName = key;
                                const tooltipText = `${schoolName}`;
                                showSchoolTooltip(event, tooltipText);
                            })
                            .on('mouseout', function () {
                                const tooltip = document.querySelector('.tooltip');
                                tooltip.style.display = 'none';
                            });

                        caliSchools.append("g")
                            .attr("class", "spot-" + key)
                            .attr("transform", "translate(" + spot[0] + "," + spot[1] + ")")
                            .append("path")
                            .attr("d", symbolGenerator)
                            .attr("fill", "black")
                            .attr("opacity", 0.5)
                            .attr("stroke", "black")
                            .attr("stroke-width", "0.1px");

                    }

                    function updateSchoolsPosition(transform) {
                        var scaleFactor = 1 / (1 + transform.k);
                        caliSchoolsGroup.selectAll("path")
                            .attr("transform", "scale(" + scaleFactor + ")");
                    }

                    // cali zoom
                    var caliZoom = d3.zoom()
                        .scaleExtent([1, 70])
                        .on("zoom", caliZoomFunc);
                    caliminisvg.call(caliZoom);
                    caliminisvg.call(caliZoom.transform, d3.zoomIdentity
                        .translate(-(15 * 75), -(15 * 150))
                        .scale(15));

                    function caliZoomFunc({ transform }) {
                        caliMiniMap.attr("transform", transform.toString());
                        caliMiniMap.select(".neighbor-outline")
                            .style("stroke-width", 3 / transform.k);
                        caliMiniMap.select(".neighbors")
                            .style("stroke-width", 1 / transform.k);
                        caliMiniCircles.attr("r", 4 / transform.k);

                        const scaledWidth = miniMapWidth / transform.k;
                        const scaledHeight = miniMapHeight / transform.k;
                        const offsetX = -transform.x / transform.k;
                        const offsetY = -transform.y / transform.k;
                        caliGray.attr("x", offsetX)
                            .attr("y", offsetY)
                            .attr("width", scaledWidth)
                            .attr("height", scaledHeight);

                        updateSchoolsPosition(transform);
                    }


                    var nyCircles = nymap.selectAll("circle").data(nyPoints)
                        .join("circle")
                        .attr("cx", d => nyProjection([d['longitude'], d['latitude']])[0])
                        .attr("cy", d => nyProjection([d['longitude'], d['latitude']])[1])
                        .attr("r", 1)
                        .attr("opacity", 1)
                        .attr("fill", d => d['is_top500'] === 0 ? "red" : "green");

                    var nyMiniCircles = nyMiniMap.selectAll("circle").data(nyPoints)
                        .join("circle")
                        .attr("cx", d => nyProjection([d['longitude'], d['latitude']])[0])
                        .attr("cy", d => nyProjection([d['longitude'], d['latitude']])[1])
                        .attr("r", 0.3)
                        .attr("opacity", 0.3)
                        .attr("fill", d => d['is_top500'] === 0 ? "red" : "green")
                        .on('mouseover', function (event, d) {
                            const isTop500 = d.is_top500 === 1 ? "Yes" : "No";
                            const formattedFunding = d.funding_total_usd.toLocaleString();
                            const tooltipText = `Name: ${d.name} <br> Location: ${d.city}, ${d.state_code}<br>Top 500: ${isTop500} <br>Total funding: $${formattedFunding}`;
                            showTooltip(event, tooltipText);
                        })
                        .on('mouseout', function () {
                            const tooltip = document.querySelector('.tooltip');
                            tooltip.style.display = 'none';
                        });

                    let nyGray = nymap.append("rect")
                        .attr("width", miniMapWidth)
                        .attr("height", miniMapHeight)
                        .attr("fill", "darkgray")
                        .attr("opacity", 0.5)
                        .attr("pointer-events", "none")
                        .attr("stroke", "black")
                        .attr("stroke-width", 2);

                    // ny zoom
                    var nyZoom = d3.zoom()
                        .scaleExtent([1, 70])
                        .on("zoom", nyZoomFunc);
                    nyminisvg.call(nyZoom);
                    nyminisvg.call(nyZoom.transform, d3.zoomIdentity
                        .translate(-(25 * 232), -(25 * 272))
                        .scale(25));

                    function nyZoomFunc({ transform }) {
                        nyMiniMap.attr("transform", transform.toString());
                        nyMiniMap.select(".neighbor-outline")
                            .style("stroke-width", 3 / transform.k);
                        nyMiniMap.select(".neighbors")
                            .style("stroke-width", 1 / transform.k);
                        nyMiniCircles.attr("r", 4 / transform.k);

                        const scaledWidth = miniMapWidth / transform.k;
                        const scaledHeight = miniMapHeight / transform.k;
                        const offsetX = -transform.x / transform.k;
                        const offsetY = -transform.y / transform.k;
                        nyGray.attr("x", offsetX)
                            .attr("y", offsetY)
                            .attr("width", scaledWidth)
                            .attr("height", scaledHeight);
                    }

                    // Created Cali Pcp
                    dimensions = ["age_first_funding_year", "age_last_funding_year", "funding_total_usd", "is_top500"]


                    var y = {}
                    for (i in dimensions) {
                        name = dimensions[i]
                        if (name === "age_first_funding_year" || name === "age_last_funding_year") {
                            lastExtent = d3.extent(data, d => d["age_last_funding_year"])
                            // console.log("last")
                            // console.log(lastExtent)
                            firstExtent = d3.extent(data, d => d["age_first_funding_year"])
                            // console.log("first")
                            // console.log(firstExtent)
                            var newExtent = [firstExtent[0], lastExtent[1]]
                            y[name] = d3.scaleLinear()
                                .domain(newExtent)
                                .range([plotHeight + margins.bottom, margins.top])
                        }
                        else if (name === "funding_total_usd") {
                            y[name] = d3.scaleLog()
                                .domain(d3.extent(data, d => d[name]))
                                .range([plotHeight + margins.bottom, margins.top])
                        }
                        else {
                            y[name] = d3.scaleLinear()
                                .domain(d3.extent(data, d => d[name]))
                                .range([plotHeight + margins.bottom, margins.top])
                        }
                    }

                    x = d3.scalePoint()
                        .range([0, plotWidth])
                        .domain(dimensions);

                    var highlight = function (d) {
                        // First, set all lines to grey with reduced opacity
                        d3.selectAll(".line")
                            .transition().duration(100)
                            .style("stroke", "lightgrey")
                            .style("opacity", "0.2");

                        // Then, highlight the hovered line with its original color and full opacity
                        d3.select(this)
                            .transition().duration(200)
                            .style("stroke", this.getAttribute("class") === 'line 0' ? "red" : "green")
                            .style("opacity", "1");
                    }

                    // Unhighlight
                    var doNotHighlight = function (d) {
                        d3.selectAll(".line")
                            .transition().duration(100)
                            .style("stroke", d => d['is_top500'] === 0 ? "red" : "green")
                            .style("opacity", "0.5")
                    }


                    function path(d) {
                        return d3.line()(dimensions.map(function (p) { return [x(p), y[p](d[p])]; }));
                    }

                    const caliPlot = caliPlotsvg.append("g")
                        .attr("transform", "translate(" + margins.left + "," + margins.top + ")");


                    caliPlot.selectAll("caliPath")
                        .data(caliPoints)
                        .enter()
                        .append("path")
                        .attr("class", function (d) { return "line " + d.is_top500 })
                        .attr("d", path)
                        .style("fill", "none")
                        .style("opacity", 0.5)
                        .style("stroke", d => d['is_top500'] === 0 ? "red" : "green")
                        .on("mouseover", highlight)
                        .on("mouseout", doNotHighlight)

                    caliPlot.selectAll("caliAxis")
                        .data(dimensions).enter()
                        .append("g")
                        .attr("class", "axis")
                        .attr("transform", function (d) { return "translate(" + x(d) + ")"; })
                        .each(function (d) {
                            if (d === "is_top500") {
                                // custom scale for is_top500
                                let axisScale = d3.scaleLinear()
                                    .domain([0, 1])
                                    .range([plotHeight + margins.bottom, margins.top]);
                                d3.select(this).call(d3.axisLeft().scale(axisScale)
                                    .tickValues([0, 1])
                                    .tickFormat(function (d) {
                                        return d === 0 ? "No" : "Yes";
                                    }))
                                    .selectAll("text")
                                    .style("font-weight", "bold");;
                            } else {
                                d3.select(this).call(d3.axisLeft().ticks(5).scale(y[d]))
                                    .selectAll("text")
                                    .style("font-weight", "bold");
                            }
                        })
                        .append("text")
                        .style("text-anchor", "middle")
                        .attr("y", 17)
                        .style("font-size", "15px")
                        .style("font-weight", 500)
                        .html(function (d) {
                            if (d === "age_first_funding_year") {
                                return "Age at <tspan font-weight='bold'>first</tspan> funding"
                            }
                            else if (d === "age_last_funding_year") {
                                return "Age at <tspan font-weight='bold'>last</tspan> funding"
                            }
                            else if (d === "funding_total_usd") {
                                return "Total funding ($)"
                            }
                            else if (d === "is_top500") {
                                return "A top 500 company"
                            }
                        })
                        .style("fill", "black");


                    caliPlot.append("text")
                        .attr("x", plotWidth / 2)
                        .attr("y", -12)
                        .attr("text-anchor", "middle")
                        .style("font-size", "25px")
                        .style("fill", "black")
                        .style("font-weight", "580")
                        .text("California's Startup Funding Profile");


                    // new york plot!

                    var yNY = {}
                    for (i in dimensions) {
                        name = dimensions[i]
                        if (name === "age_first_funding_year" || name === "age_last_funding_year") {
                            lastExtent = d3.extent(data, d => d["age_last_funding_year"])
                            // console.log("last")
                            // console.log(lastExtent)
                            firstExtent = d3.extent(data, d => d["age_first_funding_year"])
                            // console.log("first")
                            // console.log(firstExtent)
                            var newExtent = [firstExtent[0], lastExtent[1]]
                            yNY[name] = d3.scaleLinear()
                                .domain(newExtent)
                                .range([plotHeight + margins.bottom, margins.top])
                        }
                        else if (name === "funding_total_usd") {
                            yNY[name] = d3.scaleLog()
                                .domain(d3.extent(data, d => d[name]))
                                .range([plotHeight + margins.bottom, margins.top])
                        }
                        else {
                            yNY[name] = d3.scaleLinear()
                                .domain(d3.extent(data, d => d[name]))
                                .range([plotHeight + margins.bottom, margins.top])
                        }
                    }


                    function pathNY(d) {
                        return d3.line()(dimensions.map(function (p) { return [x(p), yNY[p](d[p])]; }));
                    }

                    const nyPlot = nyPlotsvg.append("g")
                        .attr("transform", "translate(" + margins.left + "," + margins.top + ")");


                    nyPlot.selectAll("nyPath")
                        .data(nyPoints)
                        .enter()
                        .append("path")
                        .attr("class", function (d) { return "line " + d.is_top500 })
                        .attr("d", pathNY)
                        .style("fill", "none")
                        .style("opacity", 0.5)
                        .style("stroke", d => d['is_top500'] === 0 ? "red" : "green")
                        .on("mouseover", highlight)
                        .on("mouseout", doNotHighlight)

                    nyPlot.selectAll("nyAxis")
                        .data(dimensions).enter()
                        .append("g")
                        .attr("class", "axis")
                        .attr("transform", function (d) { return "translate(" + x(d) + ")"; })
                        .each(function (d) {
                            if (d === "is_top500") {
                                // custom scale for is_top500
                                let axisScale = d3.scaleLinear()
                                    .domain([0, 1])
                                    .range([plotHeight + margins.bottom, margins.top]);
                                d3.select(this).call(d3.axisLeft().scale(axisScale)
                                    .tickValues([0, 1])
                                    .tickFormat(function (d) {
                                        return d === 0 ? "No" : "Yes";
                                    }))
                                    .selectAll("text")
                                    .style("font-weight", "bold");;
                            } else {
                                d3.select(this).call(d3.axisLeft().ticks(5).scale(yNY[d]))
                                    .selectAll("text")
                                    .style("font-weight", "bold");;
                            }
                        })
                        .append("text")
                        .style("text-anchor", "middle")
                        .attr("y", 17)
                        .style("font-size", "15px")
                        .style("font-weight", 500)
                        .html(function (d) {
                            if (d === "age_first_funding_year") {
                                return "Age at <tspan font-weight='bold'>first</tspan> funding"
                            }
                            else if (d === "age_last_funding_year") {
                                return "Age at <tspan font-weight='bold'>last</tspan> funding"
                            }
                            else if (d === "funding_total_usd") {
                                return "Total funding ($)"
                            }
                            else if (d === "is_top500") {
                                return "A top 500 company"
                            }
                        })
                        .style("fill", "black");


                    nyPlot.append("text")
                        .attr("x", plotWidth / 2)
                        .attr("y", -12)
                        .attr("text-anchor", "middle")
                        .style("font-size", "25px")
                        .style("fill", "black")
                        .style("font-weight", "580")
                        .text("New York's Startup Funding Profile");

                })

        }
        requestData();

    </script>
</body>